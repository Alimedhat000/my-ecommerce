generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refreshToken  RefreshToken?
  // Post          Post[]
  Address       Address[]
  Review        Review[]
  Order         Order[]
  Cart          Cart?
  PaymentMethod PaymentMethod[]
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int      @unique
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Address {
  id         Int      @id @default(autoincrement())
  street     String
  city       String
  state      String
  postalCode String
  country    String
  userId     Int
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())

  user  User    @relation(fields: [userId], references: [id])
  Order Order[]
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String
  parentId Int? //(nullable, FK â†’ Categories for nested categories) 
  parent   Category?  @relation("CategoryToParent", fields: [parentId], references: [id])
  children Category[] @relation("CategoryToParent")
  products Product[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int
  categoryId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category   Category    @relation(fields: [categoryId], references: [id])
  reviews    Review[]
  orderItems OrderItem[]
  cartItems  CartItem[]
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  rating    Int // number between 1-5
  comment   String?
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model Order {
  id              Int      @id @default(autoincrement())
  userId          Int
  addressId       Int
  paymentMethodId Int
  status          String
  totalAmount     Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user          User          @relation(fields: [userId], references: [id])
  address       Address       @relation(fields: [addressId], references: [id])
  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  orderItems    OrderItem[]
}

model OrderItem {
  id        Int   @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User       @relation(fields: [userId], references: [id])
  items CartItem[]
}

model CartItem {
  id        Int @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model PaymentMethod {
  id        Int       @id @default(autoincrement())
  userId    Int
  type      String
  provider  String?
  accountNo String?
  expiry    DateTime?
  createdAt DateTime  @default(now())

  user   User    @relation(fields: [userId], references: [id])
  orders Order[]
}

// model Post {
//   id        Int     @id @default(autoincrement())
//   title     String
//   content   String?
//   published Boolean @default(false)
//   authorId  Int

//   author User @relation(fields: [authorId], references: [id])
// }
