generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  avatar    String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refreshToken  RefreshToken?
  Address       Address[]
  Review        Review[]
  Order         Order[]
  Cart          Cart?
  PaymentMethod PaymentMethod[]
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int      @unique
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Address {
  id         Int      @id @default(autoincrement())
  street     String
  city       String
  state      String
  postalCode String
  country    String
  userId     Int
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())

  user  User    @relation(fields: [userId], references: [id])
  Order Order[]
}

// Collections (like categories but more flexible)
model Collection {
  id          Int     @id @default(autoincrement())
  shopifyId   String? @unique
  title       String
  handle      String  @unique
  description String?
  published   Boolean @default(false)
  sortOrder   String  @default("manual") // manual, best-selling, created, price

  // SEO
  seoTitle       String?
  seoDescription String?

  products  ProductCollection[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@map("collections")
}

// Many-to-many relation between products and collections
model ProductCollection {
  id       Int @id @default(autoincrement())
  position Int @default(1)

  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    Int
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId Int

  @@unique([productId, collectionId])
  @@map("product_collections")
}

model Product {
  id          Int           @id @default(autoincrement())
  shopifyId   String?       @unique
  title       String
  handle      String        @unique //url friendly identifier 
  bodyHtml    String? // Rich text description
  vendor      String? // brand or manufacturer
  tags        String[] // array of tags for search/filter
  status      ProductStatus @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // SEO fields
  seoTitle       String?
  seoDescription String?

  // Relations
  variants    ProductVariant[]
  images      ProductImage[]
  options     ProductOption[]
  collections ProductCollection[]
  reviews     Review[]

  @@map("product")
}

// Product variants handle different combinations (size + color, etc.)
model ProductVariant {
  id               Int      @id @default(autoincrement())
  shopifyId        String?  @unique
  title            String // e.g., "Red / Large"
  sku              String?
  barcode          String?
  price            Decimal  @db.Decimal(10, 2)
  compareAtPrice   Decimal? @db.Decimal(10, 2) // Original price for discounts
  inventoryQty     Int      @default(0)
  position         Int      @default(1)
  weight           Float?
  requiresShipping Boolean  @default(true)
  taxable          Boolean  @default(true)
  available        Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Variant options (up to 3 like Shopify)
  option1 String? // e.g., "Red"
  option2 String? // e.g., "Large" 
  option3 String? // e.g., "Cotton" (rarely used)

  // Relations
  product    Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
  image      ProductImage? @relation(fields: [imageId], references: [id])
  imageId    Int?
  cartItems  CartItem[]
  orderItems OrderItem[]

  @@index([productId, position])
  @@map("product_variants")
}

// Product options define what can vary (Color, Size, Material)
model ProductOption {
  id       Int      @id @default(autoincrement())
  name     String // e.g., "Color", "Size"
  position Int // Order of options (1, 2, 3)
  values   String[] // e.g., ["Red", "Blue", "Green"]

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  @@unique([productId, position])
  @@map("product_options")
}

// Images can be linked to specific variants
model ProductImage {
  id         Int      @id @default(autoincrement())
  shopifyId  String?  @unique
  src        String // Cloudinary URL
  alt        String?
  width      Int?
  height     Int?
  position   Int      @default(1)
  variantIds String[] // Which variants use this image

  product   Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  variants  ProductVariant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId, position])
  @@map("product_images")
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  rating    Int // number between 1-5
  comment   String?
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@map("review")
}

model Order {
  id              Int      @id @default(autoincrement())
  userId          Int
  addressId       Int
  paymentMethodId Int
  status          String
  totalAmount     Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user          User          @relation(fields: [userId], references: [id])
  address       Address       @relation(fields: [addressId], references: [id])
  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  orderItems    OrderItem[]

  @@map("order")
}

model OrderItem {
  id        Int   @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float

  order            Order           @relation(fields: [orderId], references: [id])
  ProductVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
  productVariantId Int?
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User       @relation(fields: [userId], references: [id])
  items CartItem[]
}

model CartItem {
  id        Int @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int

  cart             Cart            @relation(fields: [cartId], references: [id])
  ProductVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
  productVariantId Int?
}

model PaymentMethod {
  id        Int       @id @default(autoincrement())
  userId    Int
  type      String
  provider  String?
  accountNo String?
  expiry    DateTime?
  createdAt DateTime  @default(now())

  user   User    @relation(fields: [userId], references: [id])
  orders Order[]
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}
