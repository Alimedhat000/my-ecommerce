{"level":"error","message":"Caught async error: \nInvalid `prisma.user.findUnique()` invocation in\n/Users/azharhussain/projects/personal/Express-TypeScript-API-with-Prisma-and-Authentication/src/services/authService.ts:9:42\n\n  6 \n  7 export const register = async (email: string, password: string, name: string) => {\n  8   logger.info(`Attempting to register user with email: ${email}`);\n→ 9   const existingUser = await prisma.user.findUnique({\n        where: {\n          email: undefined,\n      ?   id?: Int,\n      ?   AND?: UserWhereInput | UserWhereInput[],\n      ?   OR?: UserWhereInput[],\n      ?   NOT?: UserWhereInput | UserWhereInput[],\n      ?   password?: StringFilter | String,\n      ?   name?: StringNullableFilter | String | Null\n        }\n      })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id` or `email` arguments. Available options are marked with ?.","service":"user-service","stack":"PrismaClientValidationError: \nInvalid `prisma.user.findUnique()` invocation in\n/Users/azharhussain/projects/personal/Express-TypeScript-API-with-Prisma-and-Authentication/src/services/authService.ts:9:42\n\n  6 \n  7 export const register = async (email: string, password: string, name: string) => {\n  8   logger.info(`Attempting to register user with email: ${email}`);\n→ 9   const existingUser = await prisma.user.findUnique({\n        where: {\n          email: undefined,\n      ?   id?: Int,\n      ?   AND?: UserWhereInput | UserWhereInput[],\n      ?   OR?: UserWhereInput[],\n      ?   NOT?: UserWhereInput | UserWhereInput[],\n      ?   password?: StringFilter | String,\n      ?   name?: StringNullableFilter | String | Null\n        }\n      })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id` or `email` arguments. Available options are marked with ?.\n    at throwValidationException (/Users/azharhussain/projects/personal/Express-TypeScript-API-with-Prisma-and-Authentication/node_modules/@prisma/client/src/runtime/core/errorRendering/throwValidationException.ts:45:9)\n    at ri.handleRequestError (/Users/azharhussain/projects/personal/Express-TypeScript-API-with-Prisma-and-Authentication/node_modules/@prisma/client/src/runtime/RequestHandler.ts:202:7)\n    at ri.handleAndLogRequestError (/Users/azharhussain/projects/personal/Express-TypeScript-API-with-Prisma-and-Authentication/node_modules/@prisma/client/src/runtime/RequestHandler.ts:174:12)\n    at ri.request (/Users/azharhussain/projects/personal/Express-TypeScript-API-with-Prisma-and-Authentication/node_modules/@prisma/client/src/runtime/RequestHandler.ts:143:12)\n    at l (/Users/azharhussain/projects/personal/Express-TypeScript-API-with-Prisma-and-Authentication/node_modules/@prisma/client/src/runtime/getPrismaClient.ts:862:24)","timestamp":"2025-08-11 13:19:39"}
{"level":"error","message":"500 - \nInvalid `prisma.user.findUnique()` invocation in\n/Users/azharhussain/projects/personal/Express-TypeScript-API-with-Prisma-and-Authentication/src/services/authService.ts:9:42\n\n  6 \n  7 export const register = async (email: string, password: string, name: string) => {\n  8   logger.info(`Attempting to register user with email: ${email}`);\n→ 9   const existingUser = await prisma.user.findUnique({\n        where: {\n          email: undefined,\n      ?   id?: Int,\n      ?   AND?: UserWhereInput | UserWhereInput[],\n      ?   OR?: UserWhereInput[],\n      ?   NOT?: UserWhereInput | UserWhereInput[],\n      ?   password?: StringFilter | String,\n      ?   name?: StringNullableFilter | String | Null\n        }\n      })\n\nArgument `where` of type UserWhereUniqueInput needs at least one of `id` or `email` arguments. Available options are marked with ?. - /api/auth/register - POST - ::1","service":"user-service","timestamp":"2025-08-11 13:19:39"}
{"level":"error","message":"Caught async error: Email already in use","service":"user-service","stack":"Error: Email already in use\n    at /Users/azharhussain/projects/personal/Express-TypeScript-API-with-Prisma-and-Authentication/src/services/authService.ts:63:13\n    at Generator.throw (<anonymous>)\n    at rejected (/Users/azharhussain/projects/personal/Express-TypeScript-API-with-Prisma-and-Authentication/src/services/authService.ts:6:65)","timestamp":"2025-08-11 13:33:49"}
{"level":"error","message":"400 - Email already in use - /api/auth/register - POST - ::1","service":"user-service","timestamp":"2025-08-11 13:33:49"}
{"level":"error","message":"Caught async error: Invalid credentials","service":"user-service","stack":"Error: Invalid credentials\n    at /Users/azharhussain/projects/personal/Express-TypeScript-API-with-Prisma-and-Authentication/src/services/authService.ts:99:11\n    at Generator.next (<anonymous>)\n    at fulfilled (/Users/azharhussain/projects/personal/Express-TypeScript-API-with-Prisma-and-Authentication/src/services/authService.ts:5:58)","timestamp":"2025-08-11 13:41:27"}
{"level":"error","message":"401 - Invalid credentials - /api/auth/login - POST - ::1","service":"user-service","timestamp":"2025-08-11 13:41:27"}
{"level":"error","message":"Caught async error: User not found","service":"user-service","stack":"Error: User not found\n    at /Users/azharhussain/projects/personal/Express-TypeScript-API-with-Prisma-and-Authentication/src/services/authService.ts:92:11\n    at Generator.next (<anonymous>)\n    at fulfilled (/Users/azharhussain/projects/personal/Express-TypeScript-API-with-Prisma-and-Authentication/src/services/authService.ts:5:58)","timestamp":"2025-08-11 13:42:16"}
{"level":"error","message":"404 - User not found - /api/auth/login - POST - ::1","service":"user-service","timestamp":"2025-08-11 13:42:16"}
{"level":"error","message":"404 - ENOENT: no such file or directory, stat '/Users/azharhussain/projects/personal/Express-TypeScript-API-with-Prisma-and-Authentication/public/index.html' - / - GET - ::1","service":"user-service","timestamp":"2025-08-11 14:45:20"}
